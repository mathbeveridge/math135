[["index.html", "MATH 135: AMC I Preface", " MATH 135: AMC I Preface This is the class handbook for Math 135 AMC I at Macalester College. The content here was made by Andrew Beveridge and draws upon material prepared by Kristin Heysse, Lori Ziegelmeier and other faculty in the Department of Mathematics, Statistics and Computer Science at Macalester College. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. &lt;–# (PART) RStudio {-}–&gt; "],["r-studio-primer.html", "Topic 1 R Studio Primer 1.1 Getting Oriented 1.2 RMarkdown 1.3 Calculations in RStudio 1.4 Data 1.5 Plots", " Topic 1 R Studio Primer In our class, we will be using RStudio, a developing environment commonly used for modeling and statistics. In real world mathematics, you will need to be able to work with data and apply your calculus concepts directly. That’s what we’ll do in RStudio, as it provides an excellent sandbox for us to play in. R (what RStudio is based on) is the programming language used by professional statisticians, so these skills will be useful no matter what field you go into! However, just like any programming language, there is a startup cost. The learning curve for RStudio can be pretty steep, particularly if you’ve never done any coding before. Don’t worry, that’s where this guide comes in! In here you’ll find all sorts of explanation and examples for some of the coding we’ll be doing in (and out of) class. I promise, it’ll be worth in the end, and you’ll be a coding master. 1.1 Getting Oriented 1.1.1 First login You’ll get into RStudio via the url https://rstudio.macalester.edu. It’s linked in our Moodle page if you’re feeling a little lazy. Your login is your Macalester username and password. You’ll be given the following page (with your username in the uppper right corner): I tend to ignore the projects and just activate a new session by clicking that panel. 1.1.2 The RStudio window Once you’ve got an active session, you’ll be shown the following window. We’ll talk about its parts, starting with the four panels you’ll see. This picture is from a previous version of RStudio, but everything should work the same! 1.1.2.1 Panels Source: This is where you will edit RMarkdown notebooks, which are described much more in the RMarkdown section. Console: This is RStudio’s command line. It’s a great place to test code and serves as a basic calculator. Environment, history: this panel keeps track of your work. The environment tab shows all the variables you have named in the session (including data, functions, and lists) and gives you a preview of them. The history tab tracks the pieces of code you run. Everything else: this is where you’ll find a lot of stuff, including the files you build and the plots you create of data/functions. It also has the packages list (described in the next subsection) and the help window, which can show you documentation of commands. Now that we know what we’re looking at, let’s talk specifics. We’ll talk a lot more about the source panel in the RMarkdown section. 1.1.2.2 Specific functions The new document button. This is how you’ll make new files in your source window. The quit session button. Somtimes it’s best to just start over if you can’t figure out why something it not working. You’ll be kicked back to that first page from the previous section. The clean environment button. Use this when you want to clear all you variables, including data sets. The files buttons. You’ll use these to create, delete, and organize RMarkdown files and data files. See the data section for more information on how to upload data. 1.1.2.3 Command Line Console The command line console is the most basic way to run code. It’s great for simple calculations and to test out code before you run it. We’ll run longer blocks of code in our notebooks. You can try out a few calculations here. Notice! Once you run a command (by pressing enter) it is gone to history. You don’t go back and edit previous lines if you find a mistake. Instead, you run the command again with the fixed piece in a new line. Thankfully, RStudio makes this not so terrible. By pushing the UP button on your keyboard, you can scroll through previous commands that you’ve used. 1.1.3 Packages RStudio is open source, which means many people write packages to augment what it can do by default. Their work is our gain, and we’ll need a few packages to be able to access what we want. In the lower right hand panel click on the packages tab. Then click on the check boxes next to the following packages: fetch: this package knows how to load in data files mosaic, mosaicCore, mosaicData: these contain the specific built-ins which create and plot functions for us. By checking the box by them, we import their functions into the session. Easy enough. mosaicCalc: Some of the function commands from the mosaic family of packages don’t interact well with the built in derivative and antiderivative functions in RStudio. mosaicCalc fixes this If you don’t see mosaicCalc, then you need to download it. Run the following line of code in your console: install.packages(\"mosaicCalc\") Once you do this, make sure that the mosaicCal box is checked in the packages list 1.2 RMarkdown In AMC1, we’ll be working with code a lot: writing it, running it, analyzing it, and commenting on it. We’ll also be going back to code we’ve already used and tweaking it to solve new but related questions. For all of these reasons, we’re going to use RMarkdown notebooks. The notebook will run large chunks of code at a time and show the output right next to the code. It’s also easier for you to comment on the code you’ve written and go back to it later. The best way to get working on this is to upload the template that I’ve put in the course Moodle page and just start experimenting with what’s there. I’m sure you’ll get it sorted! 1.3 Calculations in RStudio While RStudio is incredibly powerful, it has a lot of rules we need to follow about syntax. You will probably make a lot of mistakes with syntax when you start out (and probably after that, too) so it’s helpful to know the ground rules and how to read error messages that come up. 1.3.1 Basic Commands 1.3.1.1 Arithmetic RStudio has a lot of built in functions that are pretty intuitive: 2+3 ## [1] 5 4^3 ## [1] 64 sqrt(49) ## [1] 7 Some of these functions, like sqrt(), take parameters (we put in 49). If you need help with a function, particularly if you need to know about how it takes its parameters, you can use the question mark in front of the function in the Console. Running this pulls up a help page in the lower right window about that function. The examples here are particularly useful! Multiplication always takes a * sign! For example, suppose I wanted to calculate \\(2\\sin(\\pi/2)\\). We humans know that the two is multiplied on the sine function, but RStudio doesn’t get it. 2 sin(pi/2) ## Error: &lt;text&gt;:1:3: unexpected symbol ## 1: 2 sin ## ^ We can fix this by including a multiplication sign between 2 and \\(\\sin(\\pi/2)\\). 2 * sin(pi/2) ## [1] 2 1.3.1.2 Exponentials and Logarithms Another common error made regards the function \\(e^{x}\\). RStudio instead uses the built in function exp: exp(1.7) ## [1] 5.473947 Here’s how not to do this: e^(1.7): R doesn’t know what e means exp^(1.7): You don’t need the ^ exp 1.7: You do need the parentheses because exp is a function Logarithms have a similar problem. The notation for the natural log in RStudio is `log()`, _not_ &quot;ln&quot;. If you want to do $\\log_{10}$, you use the command `log10`: ```r log(100) ## [1] 4.60517 log10(100) ## [1] 2 1.3.2 Variables Sometimes it’s helpful to define a variable, particularly if we need to use it a lot. RStudio makes this easy. y=4 sin(3*y) ## [1] -0.5365729 RStudio will keep track of your variables in the environment tab. If you want to delete all your variables, use the little broom icon. 1.3.3 Lists and sequences Some of the calculations in AMC1 require a doing calculations over and over again to get an estimate of a value. A great way to do this is with a list or a sequence. It’s also how we’ll define coordinates for points. RStudio makes a list with the c() command. The “c” in short for “combine these values to make into a list”. P=c(3,5,11,-1,4) P ## [1] 3 5 11 -1 4 If you want to make a sequence, you use the seq() command. This takes the parameters from: where we start the sequence to: where we want the sequence to end by: how large the step is. So if I wanted a sequence 1, 1.1, 1.2, 1.3, etc… all the way up to 2, I would write S=seq(from=1, to=2, by=0.1) S ## [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 Note that the default order of these parameters is from,to,by so you can also get this sequence with the shorter command S=seq(1, 2, 0.1) S ## [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 Pro Tips: Always write 0.1 instead of .1 in your code. It is much easier to read and to debug later! Consider adding a space after your commas to separate parameters. It’s much easier to read later! What’s great about these lists is that you can do calculations to the whole list with only a few lines of code. For example, say I wanted to calculate \\[f(x)=e^x-1+\\sqrt{x}\\] for each of the points in my sequence S. I’ll call those new values T: T=exp(S)-1+sqrt(S) T ## [1] 2.718282 3.052975 3.415562 3.809472 4.238416 4.706434 5.217943 5.777788 6.391288 7.064299 7.803270 I use the sequence as my variable, and RStudio knows to calculate for each value in the sequence. 1.3.4 Making functions Suppose I asked you to calculate \\(f(3.2), f(3.3), f(3.33), f(3.339)\\) for the function \\[f(x)=0.7 e^{2+x}-1.1\\sin(x)-1\\] You could absolutely type this into RStudio by hand. I’ll do the first one: 0.7*exp(2+3.2)-1.1*sin(3.2)-1 ## [1] 125.9548 This would get really old, though, particularly if I asked you to do it for four hundred points instead of four points. We’ll build ourselves a function to do it instead! To do this, we’ll employ the makeFun command: f=makeFun(0.7*exp(2+x)-1.1*sin(x)-1~x) Much of this is pretty intuitive, except for maybe the final ~ x. This tilde symbol comes up a lot in RStudio and it indicates dependence. We need to tell RStudio that \\(f\\) is in terms of this variable \\(x\\), so it knows where to put an input when I ask it to: f(3.2) ## [1] 125.9548 One of the main themes of this course is to generalize the work we do to many variables. We can also build multivariable functions with the same command, just changing the dependency a little bit. Suppose I want to code up \\(g(x,y)=\\cos(xy)\\): g=makeFun(cos(x*y)~x&amp;y) g(2,pi) ## [1] 1 Notice the ampersand &amp; in the dependency. Now my function depends on both \\(x\\) and \\(y\\). 1.4 Data One of our jobs in AMC1 is tackling the challenges of working with real life data. This is where RStudio really shines. Math 155 will teach you a ton more on how to work with data in RStudio, so we’ll just handle the basics here. This section talks about how to import data and work with it. For how to plot, head over to the plots section of this primer. 1.4.1 Importing data from RStudio/mosaic We use different code to import data depending on where we’re calling it from. RStudio and the mosaic packages have lots of data sets built in that we can get at for our work. To do this, we use the fetchData command. We’ll give our data set a variable name so we can easily reference it. somedata = fetch::fetchData(&quot;stan-data.csv&quot;) ## Retrieving from http://www.mosaic-web.org/go/datasets/stan-data.csv If you look over in your environment tab, this data set has now appeared. It’s 222 observations of 2 variables. In that environments tab, you can look at the data by clicking on the small arrow (to see the first few entries) or the spreadsheet button (to open the file in the source panel). If you want to see the first bit of data in your console or your RMarkdown file, you can use the head command: head(somedata) ## time temp ## 1 0 98.2 ## 2 1 94.4 ## 3 2 91.4 ## 4 3 89.1 ## 5 4 86.9 ## 6 5 84.9 It looks like we’ve got some data about temperature over time. 1.4.2 Importing .csv files Sometimes we will want to import our own data sets. The easiest way to do this is to have RStudio read it as a .csv file. Excel and other spreadsheet editors can export their files as .csv files, but we need to do some work to get it into our session. The first thing we need to do is upload the data set to our files. In the lower right panel, click on the files tab and then the upload button. You will be prompted to pick a file. Once you have uploaded the file, it should appear in your files list. At the top of the environment/history tab, there is an import data set button. From that drop down menu, pick from csv. When the popup appears, click the browse button. You will be shown the files you have in your RStudio directory. Pick the one you just uploaded. Before you import it, you may want to change the name of the data set (in the lower left corner). If you don’t want to view your data after you import it, delete the view command from the code preview section (lower right of the popup). Hit import! You’ll see your data set is listed in the environment tab. 1.5 Plots One of the first things we learn about functions is that they can be represented with a graph. We can build the plot of a function with the appropriately named plotFun. 1.5.1 Single variable plots I like to build my functions with a makeFun command first, then we employ plotFun in a similar fashion. f=makeFun(3*x+2*sin(pi*x)~x) plotFun(f(x)~x) plotFun takes a whole variety of parameters, here are a few useful ones: xlim, ylim: sets the range of your \\(x\\)-axis. Example: xlim=range(1,4), ylim=range(3,60) col: sets the color of the function you plot. RStudio will recognize most basic colors, which you will pass as strings. Example: col=\"red\" add: you’ll use this when you want to add multiple functions to the same plot. We’ll see an example of it below. Example: add=TRUE xlab, ylab: for labeling your axes. You’ll pass this as a string as well. Exanoke: xlab=\"time\", ylab=\"red=velocity, blue=position\" Let’s try some of this out. I broke the third line so it would all fit, you don’t need to! f=makeFun(x^3+3~x) g=makeFun(3*x^2~x) plotFun(f(x)~x, xlim=range(1,4), ylim=range(3,60), col=&quot;blue&quot;,xlab=&quot;time&quot;, ylab=&quot;red=velocity, blue=position&quot;) plotFun(g(x)~x, col=&quot;red&quot;, add=TRUE) RStudio is a little weird about plots in the RMarkdown in that you might get multiples if you’re adding plots together. If you want the chunk to hold all plots until the end, add fig.show='hold' into the script braces at the top of the chunk. 1.5.2 Multivariable plots Plotting multivariable functions in RStudio is very similar, but you’ll have to sort through more parameters and decide how you want to look at your function. Let’s start with what RStudio does as a default: g=makeFun(-x*y*exp(-x^2-y^2)~x&amp;y) plotFun(g(x,y)~x&amp;y) We are given quite a colorful plot! Since the function takes two variables, \\(x\\) and \\(y\\), we need some third way to display the output. That’s what the colors and contours do. The colors show the relative values of the function (cooler colors for smaller values) while the contours connect all points \\((x,y)\\) that have the same function output. Again, this plotFun comes with parameters which can make a better picture. The ones from the single variable section still hold, so we’ll list just the new ones here. filled: this determines whether you want the colors or not. Example: filled=FALSE levels: this tells RStudio about how you want the contours. You can only plot a few (as a list) or you can give it a sequence. RStudio takes a list by using the c() command, where the numbers are separated by commas. The sequence command systematically makes a list by starting from a number, going to a number, and incrementing by a certain amount. Exxample: levels = c(3,4,5) or levels=seq(from=0, to=4, by=.5) surface: sometimes (probably rarely) you may want to look at the actual three dimensional surface of the function. It’s not great for estimating, but can help you get an overall idea of what the function is doing. Example: surface=TRUE We’ll try a little bit out: g=makeFun(-x*y*exp(-x^2-y^2)~x&amp;y) plotFun(g(x,y)~x&amp;y, xlim=range(-1.5,1.5), ylim=range(-1.5,1.5), filled=FALSE, levels=seq(from=-.2,to=.2,by=0.05)) f=makeFun(3*x^2-x-2*y^2+y-2~x&amp;y) plotFun(f(x,y)~x&amp;y, surface=TRUE, xlim=range(-5,5), ylim=range(-5,5), zlab=&quot;f(x,y)&quot;) 1.5.3 Plotting data This is all great for nice, continuous, algebraic functions, but one of our jobs in AMC1 is to work with real life data. How do we plot that? Instead of the plotFun command, we’ll use plotPoints. Recall from the lists and sequences section that we can define points with the commands c() or seq(). Suppose I want to plot the following points: \\(x\\) -2.2 -2.0 -1.8 -1.6 -1.4 \\(y\\) 6 4 2 0 -2 plotPoints(c(6,4,2,0,-2)~c(-2.2,-2.0,-1.8,-1.6,-1.4)) Notice: the \\(y\\) coordinates go first! This is because we once again use the tilde to denote dependency. If you want to plot points from a data set, you’ll use the same command with some alternate parameters. I’ll use a previously loaded data set (unhelpfully) called somedata. It’s got two variables, time and temp. Check back in the data section for details. plotPoints(temp~time,data=somedata) Cool, we’ve got our plot. Two things to note: We have again put our dependent variable first and our independent variable second using the dependency symbol ~. We need to put in the parameter data=somedata! Not doing so will result in an error, because RStudio does not know where to find these elusive variables time and temp. "],["rstudio-quick-referrence.html", "Topic 2 RStudio Quick Referrence 2.1 Common Functions 2.2 Defining your own function 2.3 Creating Lists of Data 2.4 Plotting Data and Plotting Functions 2.5 Fitting a Function to Data 2.6 Plotting Surfaces in 3D 2.7 Troubleshooting", " Topic 2 RStudio Quick Referrence 2.1 Common Functions function R command comments \\(x^2\\) x^2 \\(4x^2 -7x + 3\\) 4*x^2 - 7*x + 3 You must always include the * when you multiply \\(\\sqrt{x}\\) sqrt(x) or x^(1/2) \\(\\sqrt[3]{x}\\) x^(1/3) \\(\\sin(x)\\) sin(x) \\(\\cos(x)\\) cos(x) \\(e^x\\) exp(x) exp is a function (like sin and cos), so you do NOT need a ^ \\(\\mbox{ln}(x)\\) log(x) RStudio uses the natural logarithm as the default \\(\\log(x) = \\log_{10}(x)\\) log10(x) Humans default to “log base 10.” RStudio does not! \\(\\log_{b}(x)\\) log(x,b) You can use any number \\(b\\) as the base for your logarithm 2.2 Defining your own function The makeFun command is part of the mosaic package. desired function R command comments \\(f(x) = x^2 +5x + 6\\) f = makeFun(x^2 + 5*x + 6 ~ x) remember your * signs! \\(g(x) = \\sin^2(x) - \\frac{1}{2}\\) g = makeFun(sin(x)^2 - 1/2 ~ x) note the placement of ^2 \\(P(t) = 5 e^{.25 t}\\) P = makeFun(5 * exp(0.25 * t) ~ t) exp does not need a ^ \\(Q(t) = 12.38 (1.041)^t\\) Q = makeFun(12.38 * (1.041)^t ~ t) Notes: The general syntax is makeFun( OUTPUT ~ INPUT ) where the OUTPUT is a function of the INPUT. You must assign this to a variable so that you can use it later. So your command must start with f = ... so that you get a function named f. The variable (x or t, etc) that appears in the OUTPUT must match the INPUT variable that appears after the tilde ~. The the command makeFun(x^2 ~ t) won’t work because the x^2 is not a function of t. 2.3 Creating Lists of Data Use c() to “combine” some values into a list. Assign the list to a variable so that you can use it later. my_primes = c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29) my_primes ## [1] 2 3 5 7 11 13 17 19 23 29 my_data = c(5, -2, 7, 3, -10, 15) my_data ## [1] 5 -2 7 3 -10 15 Use seq() to generate a sequential list of values in a specified range. The optional third parameter tells RStudio to increment by that value instead of incrementing by 1. my_seq1 = seq(1,10) my_seq1 ## [1] 1 2 3 4 5 6 7 8 9 10 my_seq2 = seq(5, 6, 0.25) my_seq2 ## [1] 5.00 5.25 5.50 5.75 6.00 my_seq3 = seq(5, 6, 0.1) my_seq3 ## [1] 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 6.0 2.4 Plotting Data and Plotting Functions Use plotPoints to plot a list of \\(y\\)-axis data versus a list of \\(x\\)-axis data. Separate these lists with a tilde ~. X = seq(1:5) Y = X^2 plotPoints(Y ~ X) x_data = c(2,3,5,8,13) y_data = c(2,4,8,4,2) plotPoints(y_data ~ x_data) Use plotFun to plot a function. As with plotPoints, we use a tilde ~ to separate the output variable (the function) from the input variable. The optional xlim argument specifies the domain for the plot. plotFun(sin(x) ~ x) plotFun(sin(x) ~ x, xlim=c(0, 2*pi)) We can layer one plot on top of another by using the add=TRUE argument. You only need to specify the xlim for the first plot because the second one is added to the first. It’s helpful to change the color for subsequent plots. Use the argument col=\"red\" using any color name you like (RStudio knows a lot of colors!) plotFun(2 * sin(x) ~ x, xlim=c(0, 2*pi)) plotFun(cos(3*x) ~ x, add=TRUE, col=&#39;green&#39;) We can label the axes using xlab and ylab. When you are layering two plots, you must specify these labels in the first function that you plot! plotFun(2 * sin(x) ~ x, xlim=c(0, 2*pi), xlab=&#39;time&#39;, ylab=&#39;displacement&#39;) plotFun(cos(3*x) ~ x, add=TRUE, col=&#39;green&#39;) We can also combine plots of data and functions using add=TRUE. time_data = seq(0,50, 10) pop_data = c(6.82, 9.63, 14.3, 20.48, 28.94, 42.25) plotPoints(pop_data ~ time_data, xlab=&#39;years since 1950&#39;, ylab=&#39;population (millions)&#39;) P = makeFun( 6.82 * (1.037)^t ~ t) plotFun(P(t) ~ t, add=TRUE, col=&#39;orange&#39;) 2.5 Fitting a Function to Data The fitModel command is part of the mosaic package. Here is how you would fit a linear model to data xdata = c(1,2,3,4,5) ydata = c(5.3, 7.7, 10.1, 11.3, 12.0 ) fitModel(ydata ~ A* xdata + B) ## function (xdata, ..., transformation = function (x) ## x) ## return(transformation(predict(model, newdata = data.frame(xdata = xdata), ## ...))) ## &lt;environment: 0x7ffeb2ebc670&gt; ## attr(,&quot;coefficients&quot;) ## A B ## 1.70 4.18 ## attr(,&quot;class&quot;) ## [1] &quot;nlsfunction&quot; &quot;function&quot; This output says that the best fitting linear function has slope \\(A=1.70\\) and \\(y\\)-intercept \\(B=4.18\\). So let’s create the corresponding linear function and plot it with the data. f = makeFun(1.70 * x + 4.18 ~ x) plotPoints(ydata ~ xdata) plotFun(f(x) ~ x, add=TRUE, col=&#39;orange&#39;) 2.5.1 Fitting a Power Function to Data Here are the steps to fit xdata and ydata to a power function \\(f(x) = c x^p\\). Take the log of both xdata and ydata Fit a linear function \\(y = A x + B\\) to the resulting data The original constants are p = A and c = exp(B) Here is an example f = makeFun(4.3 * x^(1.7)~x) xdata = c(1, 3, 5, 7, 9) ydata = c(7, 33, 65, 110, 180) logxdata = log(xdata) logydata = log(ydata) fitModel(logydata ~ A * logxdata + B) ## function (logxdata, ..., transformation = function (x) ## x) ## return(transformation(predict(model, newdata = data.frame(logxdata = logxdata), ## ...))) ## &lt;environment: 0x7ffeb47cc838&gt; ## attr(,&quot;coefficients&quot;) ## A B ## 1.449432 1.915983 ## attr(,&quot;class&quot;) ## [1] &quot;nlsfunction&quot; &quot;function&quot; This tells us that \\(A=1.45\\) and \\(B=1.92\\). We solve for \\(c\\) and plot the function with the data p = 1.45 p ## [1] 1.45 c = exp(1.92) c ## [1] 6.820958 plotPoints(ydata ~ xdata) plotFun(6.82 * x^1.45 ~ x, add=TRUE, col=&#39;orange&#39;) 2.6 Plotting Surfaces in 3D We plot functions \\(z = f(x,y)\\) using the plotFun() command. We specify the independent variables with the syntax ~ x&amp;y. By default, RStudio will create a contour plot of this function and include shading to help visualize the values of the function. f = makeFun(x^2 - y^2 ~ x&amp;y) plotFun(f(x,y) ~ x&amp;y) You can add more contours using the levels parameter, and turn off the shading with the filled parameter. plotFun(f(x,y) ~ x&amp;y, levels = seq(-1 ,1, .2), filled = FALSE) You can change the plot range using xlim and ylim. plotFun(f(x,y) ~ x&amp;y, xlim=c(-20,20), ylim=c(-20,20)) You can create a 3D plot by setting surface=TRUE. plotFun(f(x,y) ~ x&amp;y, xlim=c(-20,20), ylim=c(-20,20), surface=TRUE) 2.7 Troubleshooting Without fail, you will run into problems. Sometimes RStudio will give you helpful error messages, but sometimes they are obtuse. Here’s a list of some common errors and what might be wrong: Nothing ran, all I got was a plus sign… You probably forgot some parentheses. Try the following: Enter a parenthesis on that line to see if this closes it out. Press the Escape key to get to a new line. Unexpected symbol in… You may have forgotten a multiplication sign or otherwise gave RStudio a symbol it cannot parse. Check your line of code again to see if you have all your symbols. Object not found… You may not have defined that variable (or function) yet. Check your environment tab to see if it has the object you’re looking for (or if you’ve called it something different than you remember!). You also may be trying to use something from a data set that you have not included as a parameter. See if you need to add in the parameter data=.... Could not find function… RStudio doesn’t know what function you’re using. Check your capitalization and that you have the right packages installed. … number of items to replace is not a multiple of replacement length … Your input variable doesn’t match the name variable you used in the output when you called makeFun. Maybe you used x on one side of the tilde ~ and t on the other side? Argument “name” is missing, with no default… You’re probably trying to take a derivative or antiderivative without the mosaicCalc package. Go back to the packages section of the introduction for how to fix this. I can’t find my data! You may have fetched it but did not give it a name. Go back to your fetch command and make sure you have assigned it a variable. "],["functions.html", "Topic 3 Functions 3.1 Steps of the Modeling Cycle 3.2 Goals 3.3 Tasks", " Topic 3 Functions 3.1 Steps of the Modeling Cycle Ask a question about reality. Make some observations and collect the corresponding data. Conjecture a model or modify a known model based on the data. Test the model against known data (from step 2.) and modify the model as needed. Repeat steps 2.-4. to improve the model 3.2 Goals Explain what a function is Identify and explain independent and dependent variables Recognize functions in a variety of forms Find a function’s intercept(s) Identify regions where a function is increasing/decreasing Compute the average rate of change between two points on a function Determine where a function is concave up/down Compute the relative change between two points on a function 3.3 Tasks A family needs to purchase life insurance. What possible inputs might be used to determine the premium (monthly payment) for life insurance? In the Andes mountains in Peru, the number \\(N\\) of species of bats is a function of the elevation \\(h\\) in feet above sea level. What is the independent variable? What is the dependent variable? Interpret the statement \\(f(500)=200\\) if \\(f\\) represents this function. Would you guess this function to be increasing or decreasing? Sketch each of the following: An increasing function which is concave up An increasing function which is concave down A decreasing function which is concave up A decreasing function which is concave down What is the relative change in the Dow Jones average from 169.84 to 77.90 (from 1 January 1931 to 31 December 1931)? Compare this to the relative change in the Dow Jones average from 35,443.82 to 35369.09 (from 2 September 2021 to 3 September 2021). One rainy summer day, measurements were recorded (in inches) from a rain gauge every hour (in the table below). What was the average rate of rainfall from 8 a.m. to 5 p.m.? What are the units of this rate of change? Time 8 am 9 10 11 noon 1 pm 2 3 4 5 pm Amount 0.15 0.17 0.2 0.45 0.48 0.75 1.03 1.20 1.45 1.60 "],["linear-functions.html", "Topic 4 Linear Functions 4.1 Goals 4.2 Tasks", " Topic 4 Linear Functions 4.1 Goals Explain linear functions in words, tables, equations, and graphs Describe the effects of varying parameters in linear functions Assess whether given data is linear and, if so, model it 4.2 Tasks Come up with an example of a real world phenomenon that behaves like a linear function. The table below lists the average weight, \\(w\\), in pounds of American men in their sixties for height, \\(h\\), in inches Which is the dependent and which is the independent variable? Is this an increasing/decreasing function? Can this be represented by a linear function? If so, find an equation to describe this data. Height (inches) 68 69 70 71 72 73 74 75 Weight (pounds) 166 171 176 181 186 191 196 201 The plot below represents the world population growth rate by year since 1995. Y=c(0,5,10,15,20) R=c(1.41,1.26,1.20,1.13,1.06) plotPoints(R~Y,main=&quot;World Population Growth Rate&quot;,xlab=&quot;Year (since 1995)&quot;,ylab=&quot;Growth Rate&quot;) Explain why a linear model of this data is reasonable. Come up with an equation that (approximately) describes this data. What decision(s) did you make in part (b)? What are the strengths and weaknesses of your choice? Can you think of a methodology that might be better? Create a plot in RStudio that shows both the data points and the linear function that you found in part (b). Start by doing a cut-and-paste the R code above You can add your linear function to this plot using plotFun(m*t+b~t,add=TRUE) where m and b are the slope and the vertical intercept of the function you found in part (b) "],["intro-to-rstudio.html", "Topic 5 Intro to RStudio 5.1 Getting Started 5.2 R Markdown files 5.3 Writing Code 5.4 Troubleshooting", " Topic 5 Intro to RStudio Welcome to our RStudio Introduction! RStudio is a front end (user friendly) interface for R, a programming language for statistics. We’ll be using it to work with data and our various forms of functions. RStudio is a long term learning goal for us. We will be adding new functions and learning new things throughout the semester. 5.1 Getting Started Follow my lead as we get ourselves going with RStudio. We will Log in to RStudio Add some packages to the R environment Create a math135 directory to work in Create our first Rmd (‘R Markdown’) file Knit that Rmd file to create a PDF You will need to replace the auto-generated code block at the top of your Rmd file with this one, which loads the mosaic functionality into the R environment when we knit to PDF. ```{r setup, include=FALSE, warning=FALSE} knitr::opts_chunk$set(echo = TRUE) suppressPackageStartupMessages(library(mosaic)) ``` Pro Tip: Be kind to future you. Save all of your work for this class in the math135 subdirectory that we create today. Give your files meaningful names. Include the unit, the topic, the date, etc, or a helpful combination of these identifiers. 5.2 R Markdown files An R Markdown file is a hybrid file that has both text and code. You can then knit this Rmd file to make a lovely PDF. 5.2.1 Formatting Regular Text The regular text uses Markdown, which has simple commands to create formatting such has sections, bold, italic, links, itemized lists, and much more. Here are is some example Markdown syntax. # Heading This is a regular sentence. ## Sub Heading You get *italics like this.* Skipping a line starts a new paragraph. But if you don&#39;t skip a line then it&#39;s part of the same paragraph ### Sub Sub Heading You get **bold text like this.** Here is how to make an itemized list * Make sure to skip a line before your first item * The asterisk must be the **first** character on the line (no spaces!) * If you want a sublist + Start the sublist on the line below the item + Indent by three spaces. + Use a plus sign Here is a nice reference page for common R Markdown syntax. 5.2.2 Code Chunks Your R code must be placed inside code chunks. Here is what a code chuck looks like ```{r} 1 + 1 sin(pi/4) ``` When you knit your Rmd file, the code chunks are executed in order. You can also run an individual chunk by clicking on the green arrow in its upper right corner. Adding a code chunk is easy! In the top bar of the Markdown window, there’s a small, green plus C button. When you click this button, it’ll bring up options for code blocks to insert Select “R” which is the first option. (It’s the only one we will use.) 5.3 Writing Code Add a code chunk and let’s get cracking! 5.3.1 Basic Calculations We can use that code chunk to do some basic calculations. 5.3.1.1 You Try Create a code block and try to calculate each of the following. Try some other calculations, too! \\(8+13\\) \\(7*9\\) \\(\\sin(\\pi/2)\\) \\(\\sqrt{121}\\) \\((2.25)^3\\) \\(8 \\cos( \\pi/6)\\) Which ones work? If you got an error, can you fix it? Can you guess the name of the square root function? 5.3.2 Variables, Lists and Sequences When we do a calculation, we can store the result for later. Here are some examples: a = 15 b = 4 * a R is particularly good at doing calculations on lists of data. So let’s make some lists! RStudio makes a list with the c() command. The “c” in short for “combine”. P=c(3, 5, 11, -1, 4) P ## [1] 3 5 11 -1 4 If you want to make a sequence, you use the seq() command. For example: S=seq(1, 10) S ## [1] 1 2 3 4 5 6 7 8 9 10 Notice that the values increment by 1. You can use a different step size by adding a third argument. For exmaple, if I wanted a sequence 1, 1.1, 1.2, 1.3, etc… all the way up to 2, I would write T=seq(1, 2, 0.1) T ## [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 Now look at the Environment tab in the upper right window. What do you notice? Pro Tips: Be kind to future you as well as current collaborators. Always write 0.1 instead of .1 in your code. It is much easier to read and to debug later! Consider adding a space after your commas to separate parameters. It’s easier to read! 5.3.2.1 You Try Try to do the following: Create a list X containing the values 8, 6, 7, 5, 3, 0, 9. Create a list Y containing the sequence of odd integers between (and including) 1 and 19 What is the output of the command `X^2’? Can you see what R is doing? Try making another lists. Apply some functions to that list. 5.3.3 Functions Now it’s time to write your own function. Here is how you create \\(f(x)= x^2 -3\\). f = makeFun(x^2 - 3 ~ x) Much of this is pretty intuitive, except for maybe the final ~ x. This tilde symbol comes up a lot in RStudio and it indicates dependence. We need to tell RStudio that \\(f\\) is in terms of this variable \\(x\\), so it knows where to put an input when I ask it to: Notice! In the right upper window, you now have a function called f. We can do a lot with this function, but to start, let’s evaluate it at 1. f(1) ## [1] -2 What do you think this code is doing? f(S) ## [1] -2 1 6 13 22 33 46 61 78 97 5.3.3.1 You Try Create a new function \\(g\\) where \\(g(t) = \\sqrt{t-4}\\) Evaluate this function at \\(t=8\\), and \\(t=12.34\\) and \\(t=100\\) What happens when you try to evaluate this function at \\(t=2\\)? What do you think that means? 5.3.4 Plotting Let’s see how to create plots using RStudio. First, let’s create a plot of this data x 0 1 2 3 4 5 h(x) 0 1 4 9 16 25 from the function \\(h(x)=x^2\\). X = seq(0,5) Y = X^2 plotPoints(Y ~ X) Notice! We list the dependent variable Y first and then the independent variable X after the tidle ~ (which matches the syntax of makeFun). We can also plot a function. Once again the dependent variable appears after the tilde. plotFun(x^2 ~ x) We can actually plot the data and the function on the same graph. We will plot the data and then add the function by using the add=TRUE parameter for plotFun. I will also use the optional col parameter to change the color of the function curve. plotPoints(Y ~ X) plotFun(x^2 ~ x, add=TRUE, col=&#39;red&#39;) 5.3.4.1 You Try Create a sequence of integer points P from 1 to 10. Define Q = sin(P) Create a plot of Q versus P and then add the function plot of sin(x) Try plotting some other data and fuunctions. 5.4 Troubleshooting Without fail, you will make mistakes. Things will break and you’ll get error messages. That’s ok! That’s how we learn. 5.4.1 You Try Each of the following lines of code will break when run. Try them out, notice the error, and see if you can fix it. 2 sin(pi/2) sqrt(3*(7+5) Sqrt(3*(7+5)) makeFun(x^2-4, x) makeFun(x+1 ~ t) makefun(2x+1 ~ x) "],["exponential-and-logarithmic-functions.html", "Topic 6 Exponential and Logarithmic Functions 6.1 Goals 6.2 Tasks", " Topic 6 Exponential and Logarithmic Functions 6.1 Goals Explain exponential functions in words, equations, and graphs Describe the effects of varying parameters in exponential functions Assess whether given data is exponential, and if so, model it Solve for unknowns in an exponent using the logarithm Write exponential functions in equivalent forms Determine half-lives and doubling times 6.2 Tasks Here are approximate values of two functions, \\(f\\) and \\(g\\). For each function, if you think it could be linear or exponential, give a reason and find an approximate formula. \\(x\\) 20 20.5 21 21.5 22 22.5 23 \\(f(x)\\) 26.00 26.15 26.30 26.45 26.60 26.75 26.90 \\(g(x)\\) 190 217 247 282 321 366 418 A September 2007 article included the following passage about Peter Thiel, a Facebook investor and insider. Thiel justified his faith (besides his stake in the company) in Facebook’s prowess based on the exponential growth of the social network. Facebook is growing at 3 to 4 percent compounded weekly, with about 38 million members currently, he told me. At the current growth rate Facebook would have 220 million members in a year. “In three years, we could have everybody on the planet, but that’s not going to happen, but people underestimate the power of the exponential growth we are seeing,” he said. Construct a generic model function \\(F(t)\\) (that is, with no numeric values in it) for the number of Facebook users at time \\(t\\). Make sure to make a good choice for the units of \\(t\\) and \\(F(t)\\) and be sure to state what they are. Assuming 3% weekly growth, predict the number of users in one year from September 2007. Assuming 4% weekly growth, predict the number of users in one year from September 2007. Determine the rate of growth that will result in 220 million users in one year from September 2007. Then, use this to update your model from part (a), and make a plot of your function in RStudio. Note: the actual number of Facebook users in September 2008 was 100 million. Radioactive cobalt-60 has a half-life of 5.3 years. If the initial amount is 60 grams, find a formula for the amount of cobalt-60 left after \\(t\\) years. Plot your function in RStudio. In 1980, there were about 170 million vehicles (cars and trucks) and about 227 million people in the United States. The number of vehicles has been growing at 4% a year, while the population has been growing at 1% a year. When was there, on average, one vehicle per person? In RStudio, make a plot of the number of vehicles and the number of people over time on the same graph with a different color for each curve. Use your models to predict the number of vehicles and the number of people today. Then use google to see how accurate these models are over time. If an investment triples in 15 years, what interest rate (compounded continuously) does the investment earn? "],["power-functions.html", "Topic 7 Power Functions 7.1 Tasks", " Topic 7 Power Functions This activity is intended to further your understanding of power functions. When you have data that you suspect comes from a power function \\(y=k x^p\\), you can apply this technique to discover the power (exponent). Here are the steps: Take the natural log of both the \\(x\\)-axis data and the \\(y\\)-axis data Fit a line to the resulting data Use the slope and \\(y\\)-intercept of this line to find the values of the power \\(p\\) and the constant \\(k\\). 7.1 Tasks Let’s do an example where we know the power law in advance. Suppose we start out with \\[y = \\frac{3}{x^2}.\\] Do the following calculations using R. Compute the function value for \\(x = 2, 4, 7, 8, 12,\\) and 20. Now you have a list of data points: \\((2,0.75)\\), and so forth. Take the natural log (\\(\\ln\\)) of the \\(x\\) coordinate and the \\(y\\) coordinate to get a new list of points. These will be \\((0.693, -0.2877)\\) and so forth. Plot these (transformed) points. They should look like a line. Find the slope of the line. What is it? How does that quantity appear in the original function? Find the vertical intercept of the line. Take the value of the intercept and exponentiate it… that is, if the intercept is \\(b\\), take \\(e^b\\). How does this quantity show up in the original function? In practice, this technique is applied starting with step 2: data! If the log-transformed data looks like a line then you have a power law, and you can determine the power and the constant of proportionality as above. "],["periodic-functions.html", "Topic 8 Periodic Functions 8.1 Tasks", " Topic 8 Periodic Functions 8.1 Tasks For each graph shown, write down a corresponding periodic formula. "],["units-and-dimension-review.html", "Topic 9 Units and Dimension Review 9.1 Review Problems 9.2 Solutions", " Topic 9 Units and Dimension Review 9.1 Review Problems 9.1.1 Units Convert a density of 3 g/mL into pounds/in\\(^3\\). A car is going 35 miles per hour. How many feet per second is it traveling? How many centimeters per second is it traveling? 9.1.2 Dimensional Analysis A mixer with power \\(P\\) turns a mixer with wings of length \\(D\\) through a liquid of viscosity \\(H\\). Find a formula for the angular velocity \\(A = A(P,D,H)\\). Note that since angles are dimensionless, we have \\([A] = 1/T\\). The dimensions of viscosity are \\([H] = M/(LT)\\). The velocity \\(V\\) of a large ocean wave depends upon the period \\(P\\), the acceleration of gravity \\(g\\), and the density \\(\\mu\\) of the water. Find a formula for the velocity \\(V=V(P,g,\\mu)\\). 9.1.3 Fermi Estimation How many babies are born each day? It will be helpful to know that there are 7.8 billion people on the planet and that the average life expectancy is 73 years. If all the humans in the world were crammed together, how much area would we require? Is this closer to the size of a city, a state, the U.S., or North America? Hint: start by figuring out how many people would fit in 1 square meter. Then figure out how many square kilometers we would need. If you combined all the liquid you’ve consumed over your lifetime, how many Olympic swimming pools would it fill? 9.2 Solutions 9.2.1 Units We have \\[ \\frac{3 \\mbox{ g}}{1 \\mbox{ mL}} \\cdot \\frac{1 \\mbox{ mL}}{1 \\mbox{ in$^{3}$}} \\cdot \\frac{(2.54)^3 \\mbox{ cm$^3$}}{1 \\mbox{ cm$^3$}} \\cdot \\frac{1 \\mbox{ pound}}{453.6 \\mbox{ g}} = 0.108 \\frac{\\mbox{ pounds}}{\\mbox{ in$^3$}} \\] First we convert from 35 miles per hour to feet per second \\[\\frac{35 \\mbox{ miles}}{1 \\mbox{ hour}} \\cdot \\frac{5280 \\mbox{ feet}}{1 \\mbox{ miles}} \\cdot\\frac{1 \\mbox{ hour}}{60 \\mbox{ minutes}}\\cdot \\frac{1 \\mbox{ minute}}{60 \\mbox{ seconds}} = 51.33 \\frac{\\mbox{feet}}{\\mbox{sec}}\\] Now let’s convert to centimeters per second \\[ \\frac{51.33 \\mbox{ feet}}{1 \\mbox{ sec}} \\cdot \\frac{12 \\mbox{ inches}}{1 \\mbox{ feet}} \\cdot \\frac{2.54 \\mbox{ cm}}{1 \\mbox{ inch}} = 1564.64 \\frac{\\mbox{cm}}{\\mbox{sec}} \\] 9.2.2 Dimensional Analysis We have \\[ \\begin{array}{rcl} A &amp;=&amp; k P^a D^b H^c \\\\ [A] &amp;=&amp; [P]^a [D]^b [H]^c \\\\ T^{-1} &amp;=&amp; \\left( ML^2T^{-3}\\right)^a L^b \\left( M L^{-1} T^{-1} \\right)^c \\\\ M^0L^0T^{-1} &amp;=&amp; M^{a+c} L^{2a+b-c} T^{-3a-c} \\end{array} \\] and so we have \\[ 0 = a+c \\qquad 0 = 2a+b-c \\qquad -1 = -3a-c \\] which means that \\(a=1/2\\) and \\(c=-1/2\\) and \\(b=-3/4\\). So our final equation is \\[ A = k \\sqrt{\\frac{P}{D^3H}} \\] We have \\[ \\begin{array}{rcl} V &amp;=&amp; k P^a g^b \\mu^c \\\\ [V] &amp;=&amp; [P]^a [g]^b [\\mu]^c \\\\ LT^{-1} &amp;=&amp; (L^{-1})^a (LT^{-2})^b (ML^{-3})^c \\\\ L^1 T^{-1} M^0 &amp;=&amp; L^{a+b-3c} T^{-2b} M^{c} \\end{array} \\] so we have the equations \\[ 1 = a+b - 3c \\qquad -1 = -2b \\qquad 0 = c \\] which means that \\(c=0\\) and \\(b=1/2\\) and \\(a=1/2\\). So our final equation is \\[ V = k \\sqrt{Pg} \\] 9.2.3 Fermi Estimation The population of the earth is growing, but not very quickly. So let’s assume that the number of deaths is the same as the number of births. Life expectancy is 73 years, so about 1/73 of the population dies each year. So 1/73 of the population is also born each year. This leads to the estimation: \\[ 7.8 \\times 10^9 \\mbox{ people} \\times \\frac{1 \\mbox{ birth/year}}{73 \\mbox{ people}} \\times \\frac{1 \\mbox{ year}}{365 \\mbox{ days}} = 292,738 \\frac{\\mbox{ births}}{\\mbox{ day}} \\] Let’s start with the hint: How many people could we cram into one square meter? I think that we could fit about 10 people (but not 30). So we would need \\(7.8 \\times 10^8\\) square meters to fit everyone on the planet. Converting to square kilometers requires dividing by \\((10^3)^2\\), which gives \\(780\\) square kilometers. This is less than \\(30^2=900\\), which is much closer to the size of a city than the size of a state. \\(30 km \\times 30 km\\) is similar to the size of a “metro area” of a big city. How much do you drink each day? It’s probably between 1 liter and 3 liters. So let’s assume that it’s 3 liters per day. You’ve been alive for about 20 years. So the amount of liquids that you’ve consumed is at most \\[ \\frac{3 \\mbox{ liters}}{1 \\mbox{ day}}\\frac{365 \\mbox{ days}}{1 \\mbox{ year}} \\times (20 \\mbox{ years}) = 21,900 \\mbox{ liters}. \\] Now we need to approximate the volume of a swimming pool. I know that Olympic swimming pools are \\(50\\) meters long. The width smaller: let’s guess \\(30\\) meters, and the depth is about 3 meters (not 1 meter). So the volume of a pool is \\(50m \\times 30m \\times 3m = 4500 m^3\\). There are 1000 liters in a cubic meter, so you’ve consumed about 22 cubic meters of liquids in your life. That’s much smaller than one swimming pool. It would only have a depth of \\(22/(50*30)=0.015\\) meters, which is 1.5 cm. That’s enough water to get your feet wet. "]]
